AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to build frontend for DBCentral Monitoring Solution'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:     
      - 
        Label: 
          default: "General Configuration"
        Parameters:
          - GitHubRepositoryUrl
          - AppUser
      - 
        Label: 
          default: "Network and Security Configuration"
        Parameters:
          - VPCId
          - SubnetId
          - IPv4CIDR
          - IPv6CIDR
      
    ParameterLabels:
      GitHubRepositoryUrl: 
        default: "GitHub repository URL (https format)."
      AppUser: 
        default: "Application User (mail@example.com)."
      VPCId: 
        default: "VPC ID where the App Runner service will be deployed."
      SubnetId: 
        default: "Subnet ID for the App Runner VPC Connector."      
      IPv4CIDR: 
        default: "CIDR InboundAccess IPv4 allow - (ex. 192.168.1.0/24) - (Optional only for AWS WAF Service)."
      IPv6CIDR: 
        default: "CIDR InboundAccess IPv6 allow (ex. 2605:59c8:731d:4810:415:bd81:f251:f260/128) - (Optional only for AWS WAF Service)."



Parameters:
  GitHubRepositoryUrl:
    Type: String    
    Default : https://github.com/snunezcode/dbcentral-monitoring.git
   
  AppUser:
    Type: String    
    Default : mail@example.com

  IPv4CIDR:
    Type: String    
    Default : "192.168.1.0/24"

  IPv6CIDR:
    Type: String    
    Default : "2605:59c8:731d:4810:415:bd81:f251:f260/128"

  VPCId:
      Type: AWS::EC2::VPC::Id

  SubnetId:
    Type: AWS::EC2::Subnet::Id


Resources: 

#######################|-
#######################|-  Cognito
#######################|-

  CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
          UserPoolName: !Join [ "-", ["AwsDbCentralSolutionUserPool", !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          Policies: 
              PasswordPolicy: 
                  MinimumLength: 8
                  RequireUppercase: true
                  RequireLowercase: true
                  RequireNumbers: true
                  RequireSymbols: true
                  TemporaryPasswordValidityDays: 7
          LambdaConfig: {}
          AutoVerifiedAttributes: 
            - "email"
          UsernameAttributes: 
            - "email"
          MfaConfiguration: "OPTIONAL"
          SmsConfiguration: 
              SnsCallerArn: !GetAtt IAMRoleCognito.Arn 
              SnsRegion: !Ref AWS::Region
          EmailConfiguration: 
              EmailSendingAccount: "COGNITO_DEFAULT"
          AdminCreateUserConfig: 
              AllowAdminCreateUserOnly: true
          UserPoolTags: {}
          AccountRecoverySetting: 
              RecoveryMechanisms: 
                - 
                  Priority: 1
                  Name: "verified_email"
          UsernameConfiguration: 
              CaseSensitive: false
          VerificationMessageTemplate: 
              DefaultEmailOption: "CONFIRM_WITH_CODE"

  CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
          UserPoolId: !Ref CognitoUserPool
          ClientName: !Join [ "-", ["AwsDbCentralSolutionUserPoolClient", !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          RefreshTokenValidity: 1
          ReadAttributes: 
            - "address"
            - "birthdate"
            - "email"
            - "email_verified"
            - "family_name"
            - "gender"
            - "given_name"
            - "locale"
            - "middle_name"
            - "name"
            - "nickname"
            - "phone_number"
            - "phone_number_verified"
            - "picture"
            - "preferred_username"
            - "profile"
            - "updated_at"
            - "website"
            - "zoneinfo"
          WriteAttributes: 
            - "address"
            - "birthdate"
            - "email"
            - "family_name"
            - "gender"
            - "given_name"
            - "locale"
            - "middle_name"
            - "name"
            - "nickname"
            - "phone_number"
            - "picture"
            - "preferred_username"
            - "profile"
            - "updated_at"
            - "website"
            - "zoneinfo"
          ExplicitAuthFlows: 
            - "ALLOW_REFRESH_TOKEN_AUTH"
            - "ALLOW_USER_SRP_AUTH"
          PreventUserExistenceErrors: "ENABLED"
          AllowedOAuthFlowsUserPoolClient: false
          IdTokenValidity: 1440
          AccessTokenValidity: 1440
          TokenValidityUnits: 
              AccessToken: "minutes"
              IdToken: "minutes"
              RefreshToken: "days"

  CognitoUserPoolUser:
      Type: "AWS::Cognito::UserPoolUser"
      Properties:
          Username: !Ref AppUser
          UserPoolId: !Ref CognitoUserPool
          UserAttributes: 
            - 
              Name: "email_verified"
              Value: "true"
            - 
              Name: "email"
              Value: !Ref AppUser


  IAMRoleCognito:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Join [ "-", ["role-cognito-db-central-solution", !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cognito-idp.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: "Allows Cognito to use SMS MFA on your behalf."
            Policies:
            - PolicyName: "CognitoPolicy"
              PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - Effect: "Allow"
                    Action:
                      - "sns:publish"
                    Resource: "*"


#######################|-
#######################|-  CodeBuild Resources
#######################|-

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "CodeBuildPolicy"
          PolicyDocument: !Sub |
                {
                  "Version": "2012-10-17",
                  "Statement": [                      
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "logs:DescribeLogGroups"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "ecr:CreateRepository",
                              "ecr:GetAuthorizationToken"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "ecr:BatchCheckLayerAvailability",
                              "ecr:GetDownloadUrlForLayer",
                              "ecr:BatchGetImage",
                              "ecr:InitiateLayerUpload",
                              "ecr:UploadLayerPart",
                              "ecr:CompleteLayerUpload",
                              "ecr:PutImage"
                          ],
                          "Resource": "*"
                      },
                      {
                            "Effect": "Allow",
                            "Action": [
                              "dynamodb:PutItem"
                            ],
                            "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/tblDBCentralProfiles"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "iam:PassRole"
                          ],
                          "Resource": "*",
                          "Condition": {
                              "StringLike": {
                                  "iam:PassedToService": "apprunner.amazonaws.com"
                              }
                          }
                      }                      
                  ]
                }

  CodeBuildProject:
    DependsOn:
      - CognitoUserPool
      - CognitoUserPool
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ "-", ["dbcentral", !Ref AWS::AccountId , !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:        
          - Name: AppId
            Value: "dbcentral"
          - Name: CognitoUserPool
            Value: !Ref CognitoUserPool
          - Name: CognitoUserPoolClient
            Value: !Ref CognitoUserPoolClient
          - Name: AwsRegion
            Value: !Ref AWS::Region
          - Name: AwsAccountId
            Value: !Ref AWS::AccountId
          - Name: AppUser
            Value: !Ref AppUser
       
          

      Source:
        Type: GITHUB
        Location: !Ref GitHubRepositoryUrl
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - sudo yum install -y docker
                - sudo yum install -y git              
                
                    
            pre_build:
              commands:
                - aws --version
                

            build:
              commands:
                - echo --############ BUILD PHASE
                                
                - echo --## Exporting variables

                - export APP_ID="${AppId}"
                - export IMAGE_TAG="$APP_ID"
                - export COGNITO_USER_POOL="${CognitoUserPool}"
                - export COGNITO_USER_POOL_CLIENT="${CognitoUserPoolClient}"
                - export AWS_REGION="${AwsRegion}"  
                - export BUILD_PATH="/tmp/deployment/build"
                - export ECR_REPO_NAME="ecr-private-apprunner-deployment"     
                - export AWS_ACCOUNT_ID="${AwsAccountId}"        
                - export APP_USER="${AppUser}"        
                
                

                - echo --## Creating configuration files                   
               
                - |
                  cat << EOF > frontend/public/aws-exports.json
                  { "aws_region": "$AWS_REGION",  "aws_cognito_user_pool_id": "$COGNITO_USER_POOL",  "aws_cognito_user_pool_web_client_id": "$COGNITO_USER_POOL_CLIENT",  "aws_api_port": 3000,  "aws_token_expiration": 24 }
                  EOF
                - |
                  cat > supervisord.conf << 'EOF'
                  [supervisord]
                  nodaemon=true
                  logfile=/var/log/supervisor/supervisord.log
                  logfile_maxbytes=50MB
                  logfile_backups=10

                  [program:nginx]
                  command=/usr/sbin/nginx -g "daemon off;"
                  autostart=true
                  autorestart=true
                  stdout_logfile=/var/log/supervisor/nginx_stdout.log
                  stderr_logfile=/var/log/supervisor/nginx_stderr.log

                  [program:nodejs]
                  command=/usr/bin/node /aws/apps/server/api.core.js
                  directory=/aws/apps/server
                  stdout_logfile=/dev/stdout
                  stdout_logfile_maxbytes=0
                  stderr_logfile=/dev/stderr
                  stderr_logfile_maxbytes=0
                  EOF
                - |
                  cat > server.conf << 'EOF'
                  server {
                      listen 80;
                      root   /usr/share/nginx/html;
                      index  index.html index.htm;    
                      location / {
                            try_files $uri /index.html;
                      }
                      location /api {
                              proxy_pass  http://127.0.0.1:3000/api;
                      }       
                  }              
                  EOF
                - |
                  cat > Dockerfile << EOF
                  FROM public.ecr.aws/amazonlinux/amazonlinux:2023
                  RUN dnf update -y
                  # Install python3-pip for supervisor installation
                  RUN dnf install -y nginx procps shadow-utils nodejs npm python3 python3-pip
                  # Install supervisor via pip
                  RUN pip3 install supervisor
                  RUN dnf clean all
                  RUN mkdir -p /aws/apps/server
                  RUN mkdir -p /var/log/supervisor
                  RUN mkdir -p /etc/supervisor/conf.d
                 
                  # Copy files
                  COPY ./server/ /aws/apps/server/
                  RUN chmod +x /aws/apps/server/api.core.js
                  COPY ./server.conf /etc/nginx/conf.d/
                  RUN rm -rf /usr/share/nginx/html/*
                  COPY ./build/ /usr/share/nginx/html/

                  # Install Node.js dependencies
                  WORKDIR /aws/apps/server
                  RUN npm install

                  # Configure supervisord to manage both Nginx and Node.js
                  COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

                  # Expose port
                  EXPOSE 80

                  # Use supervisor as the entry point instead of running nginx directly
                  ENTRYPOINT ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
                  EOF
                
                
                
                
                - echo --## Copying configuration files
                
                - cp frontend/public/aws-exports.json server/

                
                - echo --## Building frontend
                
                - mkdir -p $BUILD_PATH
                - pwd
                - ls -la
                - cd frontend
                - npm install 
                - npm run build
                - cd .. 
                
                
                - echo --## Creating ECR Image
                
                - mkdir build
                - cp -r $BUILD_PATH/* build/
                - ls -la build
                - aws ecr create-repository --repository-name $ECR_REPO_NAME --region $AWS_REGION || echo "Repository already exists"
                - export ECR_REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
                - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                - docker build -t $ECR_REPO_NAME:$IMAGE_TAG .
                - docker tag $ECR_REPO_NAME:$IMAGE_TAG $ECR_REPO_URI:$IMAGE_TAG               
                - docker push $ECR_REPO_URI:$IMAGE_TAG
               
            post_build:
              commands:
                - echo Post-build phase started
                
     
#######################|-
#######################|-  Lambda Resources
#######################|-

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource: !GetAtt CodeBuildProject.Arn

  StartCodeBuildFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 900  # 15 minutes, adjust based on your build time
      MemorySize: 4096
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          import json
          
          def handler(event, context):
              # Extract parameters
              props = event['ResourceProperties']
              project_name = props['ProjectName']
              
              # Initialize CodeBuild client
              codebuild = boto3.client('codebuild')
              response_data = {}
              
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Start build
                      print(f"Starting CodeBuild project: {project_name}")
                      build = codebuild.start_build(projectName=project_name)
                      build_id = build['build']['id']
                      
                      print(f"Build started with ID: {build_id}")
                      response_data['BuildId'] = build_id
                      
                      # Poll until build completes or timeout
                      status = 'IN_PROGRESS'
                      while status == 'IN_PROGRESS':
                          time.sleep(30)  # Wait 30 seconds between checks
                          build_status = codebuild.batch_get_builds(ids=[build_id])
                          status = build_status['builds'][0]['buildStatus']
                          print(f"Current build status: {status}")
                          
                          # Check for timeout (context.get_remaining_time_in_millis() <= 30000)
                          if context.get_remaining_time_in_millis() <= 60000:  # 60 seconds remaining
                              print("Lambda is about to timeout. Reporting success anyway.")
                              break
                      
                      if status == 'SUCCEEDED':
                          print("Build completed successfully")
                          response_data['Status'] = 'SUCCESS'
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                      else:
                          print(f"Build failed or didn't complete: {status}")
                          response_data['Status'] = status
                          cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
                  
                  elif event['RequestType'] == 'Delete':
                      # Nothing to do on delete
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
              except Exception as e:
                  print(f"Error: {str(e)}")
                  response_data['Error'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  BuildFrontendCustomResource:
    Type: Custom::BuildFrontend
    DependsOn: 
      - CodeBuildProject
    Properties:
      ServiceToken: !GetAtt StartCodeBuildFunction.Arn
      ProjectName: !Ref CodeBuildProject


#######################|-
#######################|-  DynamoDB Profile table 
#######################|-


  UserProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "tblDBCentralProfiles"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S


#######################|-
#######################|-  App Runner Instance 
#######################|-


  IAMRoleInstanceAppRunner:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "IAMRoleDBCentralSolutionOrigin"
          AssumeRolePolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "tasks.apprunner.amazonaws.com"
                                },
                                "Action": "sts:AssumeRole"
                            }
                        ]
                    }
          Policies:
          - PolicyName: "IAMPolicyAppRunner"
            PolicyDocument: !Sub |              
                {
                    "Version": "2012-10-17",
                    "Statement": [                      
                        {
                            "Effect": "Allow",
                            "Action": [
                              "dynamodb:GetItem",
                              "dynamodb:PutItem"
                            ],
                            "Resource": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/tblDBCentralProfiles"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "sts:AssumeRole",
                            "Resource": "*"
                        }
                    ]
                }
            


######################################################################
########
########   -----------------    IAM REMOTE ROLES    -----------------
########
######################################################################


  IAMRoleDBCentralSolutionTarget:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "IAMRoleDBCentralSolution"
          AssumeRolePolicyDocument: 
              Fn::Sub:
                - |            
                  {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "AWS": "${AppRunnerRole}"
                              },
                              "Action": "sts:AssumeRole"
                          }
                      ]
                  }
                - {
                    AppRunnerRole: !GetAtt IAMRoleInstanceAppRunner.Arn
                  }    
          Policies:
          - PolicyName: "policy-dbcentral"
            PolicyDocument: !Sub |
                  {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "dsql:ListClusters",
                                  "dsql:ListTagsForResource",
                                  "dsql:GetCluster",
                                  "cloudwatch:GetMetricData"
                              ],
                              "Resource": "*"
                          }
                      ]
                  }



#######################|-
#######################|-  App Runner Resources 
#######################|-

  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for App Runner service'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref IPv4CIDR 
          Description: 'Allow HTTPS traffic from IPv4'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: !Ref IPv6CIDR
          Description: 'Allow HTTPS traffic from IPv6'        
      Tags:
        - Key: Name
          Value: !Join [ "-", ["dbcentral", !Ref AWS::AccountId , !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]],"sg"]]

  AppRunnerVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn: BuildFrontendCustomResource
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.apprunner.requests'
      VpcId: !Ref VPCId
      VpcEndpointType: Interface
      SubnetIds: 
        - !Ref SubnetId
      SecurityGroupIds:
        - !Ref AppRunnerSecurityGroup
      PrivateDnsEnabled: false


  AppRunnerAccessRole:
    Type: 'AWS::IAM::Role'    
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 
                - 'build.apprunner.amazonaws.com'
                - 'wafv2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "AppRunnerdPolicy"
          PolicyDocument: !Sub |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ecr:GetDownloadUrlForLayer",
                          "ecr:BatchGetImage",
                          "ecr:DescribeImages",
                          "ecr:GetAuthorizationToken",
                          "ecr:BatchCheckLayerAvailability"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }


  AppRunnerService:
    Type: 'AWS::AppRunner::Service'
    DependsOn: AppRunnerVpcEndpoint    
    Properties:
      ServiceName: !Join [ "-", ["dbcentral", !Ref AWS::AccountId , !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]],"apprunner"]]
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AppRunnerAccessRole.Arn
        ImageRepository:
          ImageIdentifier: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ecr-private-apprunner-deployment:dbcentral'         
          ImageConfiguration:
            Port: '80'
          ImageRepositoryType: 'ECR'
        AutoDeploymentsEnabled: false
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
        InstanceRoleArn: !GetAtt IAMRoleInstanceAppRunner.Arn
      NetworkConfiguration:        
        IngressConfiguration:
          IsPubliclyAccessible: false

  AppRunnerVpcIngressConnection:
    Type: AWS::AppRunner::VpcIngressConnection
    Properties:
      IngressVpcConfiguration:
        VpcEndpointId: !Ref AppRunnerVpcEndpoint
        VpcId: !Ref VPCId
      ServiceArn: !GetAtt AppRunnerService.ServiceArn
      VpcIngressConnectionName: !Join [ "-", ["dbcentral", !Ref AWS::AccountId , !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]],"connection"]]

